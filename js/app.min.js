/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ([
/* 0 */,
/* 1 */
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
const appHeight = () => {
    const doc = document.documentElement;
    doc.style.setProperty('--app-height', `${window.innerHeight}px`);
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (appHeight);

/***/ })
/******/ 	]);
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _modules_functions_appHeight_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);


(0,_modules_functions_appHeight_js__WEBPACK_IMPORTED_MODULE_0__["default"])();

const wrapper = document.querySelector('.wrapper');
const page = document.querySelector('.page');
const area = document.querySelector('.area');
const map = document.querySelector('.map');
const person = document.querySelector('.person');

let coordX = area.offsetWidth * 1.32;
let coordY = area.offsetHeight * 1.25;

let count = 0;

const interval = () => {

    let timeout = setInterval(() => {
        count++;
        
        if (count >= 10) {
            clearInterval(timeout);
            count = 0;
            person.classList.remove('move');
        }
    }, 100);

    if (person.classList.contains('move')) {
        clearInterval(timeout);
        count = 0;
    }
}

const scrollToArea = () => {
    if (!map.classList.contains('active')) {
        area.scrollIntoView({
            block: 'center',
            inline: 'center',
            behavior: 'auto'
        });
    }
}

const scrollToPerson = (time) => {
    if (map.classList.contains('active')) {
        const interval = setInterval(() => {
            person.scrollIntoView({
                block: 'center',
                inline: 'center',
                behavior: 'smooth'
            });

            if (count >= 10) {
                clearInterval(interval);
                count = 0;
            }
    
        }, time);

        setTimeout(() => {
            clearInterval(interval);
        }, 1000);
    }
      
}

const start = (btn) => {

    btn.classList.add('remove');
    map.classList.add('active');    

    person.style.transform = `translate(${coordX - person.offsetWidth / 2}px, ${coordY - person.offsetWidth / 2}px)`;

    setTimeout(() => {
        btn.remove();
        area.classList.add('active');
        person.classList.add('visible'); 
        page.classList.add('active');       
    }, 500);
    
    setTimeout(() => {
        person.scrollIntoView({
            block: 'center',
            inline: 'center',
            behavior: 'smooth'
        });
    }, 1000);
}

const movePerson = (e) => {

    if (e.layerX > 0 && e.layerY > 0) {
        coordX = e.layerX;
        coordY = e.layerY;  
    } else {
        coordX = e.offsetX;
        coordY = e.offsetY;  
    }

    person.classList.add('move');

    person.style.transform = `translate(${coordX - person.offsetWidth / 2}px, ${coordY - person.offsetWidth / 2}px)`;

    scrollToPerson(50);
}

const moveLeft = () => {
    coordX = coordX - 20;
    person.classList.add('move');
    person.style.transform = `translate(${coordX - person.offsetWidth / 2}px, ${coordY - person.offsetWidth / 2}px)`;
    scrollToPerson(40);
}

const moveRight = () => {
    coordX = coordX + 20;
    person.classList.add('move');
    person.style.transform = `translate(${coordX - person.offsetWidth / 2}px, ${coordY - person.offsetWidth / 2}px)`;
    scrollToPerson(40);
}

const moveTop = () => {
    coordY = coordY - 20;
    person.classList.add('move');
    person.style.transform = `translate(${coordX - person.offsetWidth / 2}px, ${coordY - person.offsetWidth / 2}px)`;
    scrollToPerson(40);
}

const moveBottom = () => {
    coordY = coordY + 20;
    person.classList.add('move');
    person.style.transform = `translate(${coordX - person.offsetWidth / 2}px, ${coordY - person.offsetWidth / 2}px)`;
    scrollToPerson(40);
}

document.addEventListener("DOMContentLoaded", () => {
    scrollToArea();
});

window.addEventListener('resize', () => {
    (0,_modules_functions_appHeight_js__WEBPACK_IMPORTED_MODULE_0__["default"])();
    scrollToArea();
});

document.addEventListener('click', (e) => {
    const playBtn = e.target.closest('.play');
    if (playBtn) {
        start(playBtn);
    }

    const map = e.target.closest('.map');
    if (map) {
        interval();      
        movePerson(e);  
    }
});

document.addEventListener('keydown', (e) => {
    if (e.key === 'ArrowLeft') {
        e.preventDefault();
        interval();
        moveLeft();
    }

    if (e.key === 'ArrowRight') {
        e.preventDefault();
        interval();
        moveRight();
    }

    if (e.key === 'ArrowUp') {
        e.preventDefault();
        interval();
        moveTop();
    }

    if (e.key === 'ArrowDown') {
        e.preventDefault();
        interval();
        moveBottom();
    }
});
/******/ })()
;